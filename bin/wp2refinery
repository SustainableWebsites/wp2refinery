#!/usr/bin/env ruby
require 'hpricot'
require 'trollop'

opts = Trollop::options do
  opt :file, "File to import", :required => true, :type => String
  opt :database, "MySQL database", :type => String
  opt :username, "MySQL database user", :type => String
  opt :password, "MySQL database password", :type => String
end

post = {}
categories = {}

# Parse XML
xml = Hpricot.XML(File.read(opts[:file]))

# Categories 
xml.search('//wp:category').each_with_index do |category, i|
   categories[i] = category.search('wp:cat_name').inner_text
end

# Post
xml.search("//item").each do |item|
  if item.search('wp:post_type').inner_html == "post"
    post[:title] = item.search("title").inner_html
    post[:link] = item.search("link").inner_html
    post[:published_at] = item.search("pubDate").inner_html
    post[:creator] = item.search("dc:creator").inner_text
    post[:content] = item.search("content:encoded").inner_text
    post[:excerpt] = item.search("excerpt:encoded").inner_text
    
    post[:wp_post_id] = item.search("wp:comment_status").inner_html
    post[:wp_ping_status] = item.search("wp:ping_status").inner_html
    post[:wp_post_name] = item.search("wp:post_name").inner_html
    post[:wp_status] = item.search("wp:status").inner_html
    post[:wp_post_parent] = item.search("wp:post_parent").inner_html
    post[:wp_menu_order] = item.search("wp:menu_order").inner_html
    post[:wp_post_type] = item.search("wp:post_type").inner_html
    post[:wp_is_sticky] = item.search("wp:is_sticky").inner_html
    
    # Meta
    item.search("wp:postmeta").each_with_index do |meta, index|
      post[:meta] ||= {}
      post[:meta][meta.search("wp:meta_key").inner_html] = meta.search("wp:meta_value").inner_html
    end
    
    # Categories
    item.search("category").each_with_index do |category, index|
      if (index%2 == 0) 
        post[:categories] ||= {}
        post[:categories] = category.inner_text
      end
    end
    
    # Comments
    item.search('wp:comment').each_with_index do |comment, index|
      unless comment.search('wp:comment_approved').inner_html == "spam"
        post[:comments] ||= {}
        post[:comments][index] ||= {}
        post[:comments][index][:comment_id] = comment.search('wp:comment_id').inner_html
        post[:comments][index][:comment_author] = comment.search('wp:comment_author').inner_html
        post[:comments][index][:comment_author_email] = comment.search('wp:comment_author_email').inner_html
        post[:comments][index][:comment_author_url] = comment.search('wp:comment_author_url').inner_html
        post[:comments][index][:comment_author_IP] = comment.search('wp:comment_author_IP').inner_html
        post[:comments][index][:comment_content] = comment.search('wp:comment_content').inner_text
        post[:comments][index][:comment_approved] = comment.search('wp:comment_approved').inner_html
        post[:comments][index][:comment_type] = comment.search('wp:comment_type').inner_html
        post[:comments][index][:comment_parent] = comment.search('wp:comment_parent').inner_html
        post[:comments][index][:comment_user_id] = comment.search('wp:comment_user_id').inner_html
      end
    end

  elsif item.search('wp:post_type').inner_html == "attachment"
    # Attachments
  end
  # Insert into Refinery blog db
  
end


